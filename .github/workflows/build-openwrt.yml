  publish-release:
    needs: [check-latest, build]
    runs-on: ubuntu-latest
    if: needs.check-latest.outputs.SKIP_BUILD != 'true'
    steps:
      - name: "Set JOB_TAG from check-latest"
        run: |
          echo "JOB_TAG=${{ needs.check-latest.outputs.OPENWRT_TAG }}" >> $GITHUB_ENV
          echo "Set JOB_TAG to: ${{ needs.check-latest.outputs.OPENWRT_TAG }}"

      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: "Install gh (GitHub CLI)"
        run: |
          sudo apt-get update
          sudo apt-get install -y curl gnupg
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt-get update
          sudo apt-get install -y gh

      - name: "Authenticate gh with token"
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

      - name: "Check and delete existing release if needed"
        run: |
          RELEASE_TAG="openwrt-${{ env.JOB_TAG }}"
          if gh release view "${RELEASE_TAG}" >/dev/null 2>&1; then
            echo "Deleting existing release: ${RELEASE_TAG}"
            gh release delete "${RELEASE_TAG}" --yes || true
          else
            echo "No existing release found for: ${RELEASE_TAG}"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: "Download artifacts (x86_64)"
        uses: actions/download-artifact@v4
        with:
          name: openwrt-x86_64-${{ env.JOB_TAG }}
          path: ./release_assets/x86_64

      - name: "Download artifacts (aarch64)"
        uses: actions/download-artifact@v4
        with:
          name: openwrt-aarch64-${{ env.JOB_TAG }}
          path: ./release_assets/aarch64

      - name: "Create GitHub Release"
        id: ghrel
        uses: softprops/action-gh-release@v1
        with:
          tag_name: openwrt-${{ env.JOB_TAG }}
          name: OpenWrt ${{ env.JOB_TAG }} Build
          body: |
            Automated OpenWrt builds for ${{ env.JOB_TAG }}.
            
            Build information:
            - Run ID: ${{ github.run_id }}
            - Attempt: ${{ github.run_attempt }}
            - Trigger: ${{ github.event_name }}
            
            Supported architectures:
            - x86_64
            - aarch64
            
            **Note**: These are automated builds. Please verify functionality before use.
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: "Upload release assets (x86_64)"
        run: |
          for f in release_assets/x86_64/*; do
            [ -f "$f" ] || continue
            echo "Uploading $f"
            gh release upload "openwrt-${{ env.JOB_TAG }}" "$f" --clobber
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: "Upload release assets (aarch64)"
        run: |
          for f in release_assets/aarch64/*; do
            [ -f "$f" ] || continue
            echo "Uploading $f"
            gh release upload "openwrt-${{ env.JOB_TAG }}" "$f" --clobber
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: "Save latest tag (on schedule)"
        if: ${{ github.event_name == 'schedule' }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          echo "${{ env.JOB_TAG }}" > openwrt/LAST_OPENWRT_TAG
          git add openwrt/LAST_OPENWRT_TAG
          git commit -m "ci: update LAST_OPENWRT_TAG to ${{ env.JOB_TAG }}" || echo "no change"
          git push origin HEAD:main || echo "push failed"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
