# GitHub Actions workflow for building OpenWrt and publishing to Releases
name: build-openwrt

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      archs:
        description: 'Comma-separated architectures to build (default: x86_64)'
        required: false
        default: 'x86_64'
  schedule:
    - cron: '0 2 * * *'

jobs:
  check-latest:
    runs-on: ubuntu-latest
    outputs:
      OPENWRT_TAG: ${{ steps.set.outputs.OPENWRT_TAG }}
      SKIP_BUILD: ${{ steps.set.outputs.SKIP_BUILD }}
    steps:
      - name: "Determine latest OpenWrt tag"
        id: set
        run: |
          echo "GITHUB_EVENT_NAME=${GITHUB_EVENT_NAME}"
          LATEST_TAG=$(curl -s "https://api.github.com/repos/openwrt/openwrt/releases" \
            | jq -r 'map(select(.prerelease==false)) | .[0].tag_name' 2>/dev/null || true)
          if [ -z "${LATEST_TAG}" ]; then
            LATEST_TAG="openwrt-23.05"
          fi
          SKIP="false"
          if [ "${GITHUB_EVENT_NAME}" = "schedule" ]; then
            if [ -f openwrt/LAST_OPENWRT_TAG ]; then
              PREV_TAG=$(cat openwrt/LAST_OPENWRT_TAG)
              if [ "${PREV_TAG}" = "${LATEST_TAG}" ]; then
                SKIP="true"
              fi
            fi
          fi
          echo "OPENWRT_TAG=${LATEST_TAG}" >> $GITHUB_OUTPUT
          echo "SKIP_BUILD=${SKIP}" >> $GITHUB_OUTPUT

      - name: "Debug: print computed outputs"
        run: |
          echo "Computed OPENWRT_TAG: ${{ steps.set.outputs.OPENWRT_TAG }}"
          echo "Computed SKIP_BUILD: ${{ steps.set.outputs.SKIP_BUILD }}"

  prepare:
    needs: check-latest
    if: needs.check-latest.outputs.SKIP_BUILD != 'true'
    runs-on: ubuntu-latest
    outputs:
      ARCHS_JSON: ${{ steps.matrix.outputs.ARCHS_JSON }}
    steps:
      - name: "Determine architectures and produce JSON matrix"
        id: matrix
        run: |
          INPUT_ARCHS="${{ github.event.inputs.archs || 'x86_64' }}"
          IFS=',' read -ra ARRS <<< "$INPUT_ARCHS"
          JSON="["
          FIRST=true
          for a in "${ARRS[@]}"; do
            t="$(echo "$a" | xargs)"
            [ -z "$t" ] && continue
            if [ "$FIRST" = true ]; then
              FIRST=false
            else
              JSON+=","
            fi
            JSON+="\"${t}\""
          done
          JSON+="]"
          echo "ARCHS_JSON=$JSON" >> $GITHUB_OUTPUT
          echo "Computed ARCHS_JSON=$JSON"
        shell: bash

  build:
    needs: [check-latest, prepare]
    if: needs.check-latest.outputs.SKIP_BUILD != 'true'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        arch: ${{ fromJson(needs.prepare.outputs.ARCHS_JSON) }}
    env:
      # set a job-level env default from check-latest outputs
      OPENWRT_TAG: ${{ needs.check-latest.outputs.OPENWRT_TAG }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: "Debug env at start"
        run: |
          echo "Matrix arch=${{ matrix.arch }}"
          echo "Needs OPENWRT_TAG (raw): '${{ needs.check-latest.outputs.OPENWRT_TAG }}'"
          echo "Job env OPENWRT_TAG (initial): '${{ env.OPENWRT_TAG }}'"

      - name: "Ensure OPENWRT_TAG is available to subsequent steps (write to GITHUB_ENV)"
        run: |
          # write the check-latest output explicitly into GITHUB_ENV so it's definitely
          # available for actions/upload-artifact and later steps.
          echo "OPENWRT_TAG=${{ needs.check-latest.outputs.OPENWRT_TAG }}" >> $GITHUB_ENV
          # also create JOB_TAG as alias
          echo "JOB_TAG=${{ needs.check-latest.outputs.OPENWRT_TAG }}" >> $GITHUB_ENV
          echo "Wrote OPENWRT_TAG and JOB_TAG to GITHUB_ENV"

      - name: "Setup prerequisites (apt-get)"
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update -y
          sudo DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
            build-essential git subversion libncurses5-dev zlib1g-dev libssl-dev \
            python3 python3-pip rsync wget ccache jq ca-certificates bc xz-utils file apt-transport-https gnupg curl
          sudo apt-get update -y || true
          if ! sudo apt-get install -y python3-distutils; then
            echo "python3-distutils not available, trying candidates..."
            sudo apt-get install -y python3.11-distutils python3.10-distutils || true
          fi
          sudo apt-get install -y python3-setuptools || true
          sudo apt-get clean

      - name: "Ensure build scripts executable"
        run: |
          chmod +x ./scripts/build-openwrt.sh || true
          chmod +x ./scripts/dockerize-rootfs.sh || true

      - name: "Run build script on runner"
        env:
          ARCH: ${{ matrix.arch }}
        run: |
          echo "Run build for ARCH=${ARCH}, OPENWRT_TAG='${JOB_TAG:-}'"
          mkdir -p artifacts/${{ matrix.arch }}
          ./scripts/build-openwrt.sh "${ARCH}" "${JOB_TAG:-}" "artifacts/${{ matrix.arch }}"

      - name: "Debug: list artifacts before upload"
        run: |
          echo "JOB_TAG='${JOB_TAG:-}'"
          echo "List artifacts for arch=${{ matrix.arch }}:"
          ls -la artifacts/${{ matrix.arch }} || true
          find artifacts/${{ matrix.arch }} -maxdepth 3 -type f -print || true

      - name: "Upload build artifacts"
        uses: actions/upload-artifact@v4
        with:
          # use JOB_TAG env (set earlier via GITHUB_ENV)
          name: openwrt-${{ matrix.arch }}-${{ env.JOB_TAG }}
          path: artifacts/${{ matrix.arch }}/*

  publish-release:
    needs: build
    runs-on: ubuntu-latest
    if: needs.check-latest.outputs.SKIP_BUILD != 'true'
    env:
      JOB_TAG: ${{ needs.check-latest.outputs.OPENWRT_TAG }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: "Debug: print tag and list workspace"
        run: |
          echo "RELEASE TAG from check-latest (JOB_TAG): '${{ env.JOB_TAG }}'"
          echo "Workspace contents:"
          ls -la || true

      - name: "Download artifacts (x86_64)"
        uses: actions/download-artifact@v4
        with:
          name: openwrt-x86_64-${{ env.JOB_TAG }}
          path: ./release_assets/x86_64 || true

      - name: "Download artifacts (aarch64)"
        uses: actions/download-artifact@v4
        with:
          name: openwrt-aarch64-${{ env.JOB_TAG }}
          path: ./release_assets/aarch64 || true

      - name: "Debug: list release assets dirs"
        run: |
          echo "x86_64 assets:"
          ls -la release_assets/x86_64 || true
          echo "aarch64 assets:"
          ls -la release_assets/aarch64 || true

      - name: "Install gh (GitHub CLI)"
        run: |
          sudo apt-get update
          sudo apt-get install -y curl gnupg
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt-get update
          sudo apt-get install -y gh

      - name: "Create or update GitHub Release"
        id: ghrel
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.JOB_TAG }}
          name: OpenWrt ${{ env.JOB_TAG }}
          body: |
            Automated OpenWrt builds for ${{ env.JOB_TAG }}.
            包含平台: x86_64, aarch64（按需添加）。
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: "Authenticate gh with token"
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

      - name: "Upload release assets (x86_64)"
        run: |
          for f in release_assets/x86_64/* || true; do
            [ -f "$f" ] || continue
            echo "Uploading $f"
            gh release upload "${{ env.JOB_TAG }}" "$f" --clobber
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: "Upload release assets (aarch64)"
        run: |
          for f in release_assets/aarch64/* || true; do
            [ -f "$f" ] || continue
            echo "Uploading $f"
            gh release upload "${{ env.JOB_TAG }}" "$f" --clobber
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: "Save latest tag (on schedule)"
        if: ${{ github.event_name == 'schedule' }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          echo "${{ env.JOB_TAG }}" > openwrt/LAST_OPENWRT_TAG
          git add openwrt/LAST_OPENWRT_TAG || true
          git commit -m "ci: update LAST_OPENWRT_TAG to ${{ env.JOB_TAG }}" || echo "no change"
          git push origin HEAD:main || echo "push failed"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
